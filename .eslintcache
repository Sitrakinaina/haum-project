[{"/home/sitraka/haum-project/src/index.jsx":"1","/home/sitraka/haum-project/src/DialogContext.js":"2","/home/sitraka/haum-project/src/serviceWorker.js":"3","/home/sitraka/haum-project/src/App.jsx":"4","/home/sitraka/haum-project/src/services/meteo.js":"5","/home/sitraka/haum-project/src/components/info/Projectinfo.jsx":"6","/home/sitraka/haum-project/src/components/Dialog.jsx":"7","/home/sitraka/haum-project/src/components/DialogMeteo.jsx":"8","/home/sitraka/haum-project/src/components/ActionButton.jsx":"9","/home/sitraka/haum-project/src/components/animation.js":"10","/home/sitraka/haum-project/src/components/music.jsx":"11"},{"size":582,"mtime":1688562994707,"results":"12","hashOfConfig":"13"},{"size":2427,"mtime":1688462903470,"results":"14","hashOfConfig":"13"},{"size":5086,"mtime":1688462903470,"results":"15","hashOfConfig":"13"},{"size":5031,"mtime":1688715833403,"results":"16","hashOfConfig":"13"},{"size":800,"mtime":1688462903470,"results":"17","hashOfConfig":"13"},{"size":3203,"mtime":1688743292760,"results":"18","hashOfConfig":"13"},{"size":8882,"mtime":1688743070476,"results":"19","hashOfConfig":"13"},{"size":2790,"mtime":1688462903470,"results":"20","hashOfConfig":"13"},{"size":728,"mtime":1688462903470,"results":"21","hashOfConfig":"13"},{"size":407,"mtime":1688462903470,"results":"22","hashOfConfig":"13"},{"size":6282,"mtime":1688748915548,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"g0v693",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sitraka/haum-project/src/index.jsx",[],["50","51"],"/home/sitraka/haum-project/src/DialogContext.js",["52"],"import React, { createContext, useState } from \"react\";\nimport { getMeteoForCity, getMeteoForCityFake } from \"./services/meteo\";\nimport {useSpeechSynthesis} from \"react-speech-kit\"\nexport const DialogContext = createContext();\n\nconst initialState = {\n    dialogs: [\n        { msg: \"En quoi puis-je vous aider aujourd'hui?\", id: 0, user: false },\n    ],\n    city: [\"Antananarivo\", \"Mahajanga\", \"Paris\"],\n};\nexport const DialogProvider = ({ children }) => {\n    const [dialogs, setDialogs] = useState(initialState.dialogs);\n    const [loading, setLoading] = useState(false);\n    const [meteoDialog, setMeteo] = useState(false);\n    const {speak} = useSpeechSynthesis();\n    const getMeteo = async (city, msg = \"\") => {\n        console.log(\"city \", city);\n        setLoading(true);\n        closeMeteo();\n\n        try {\n            const response = await getMeteoForCity(city);\n            const data = response.data\n            console.log(\"response\", data);\n            replyUser(\n                `Meteo à ${city}: \n                Température ${Math.floor(data.main.temp)}° C,  ${\n                    data.weather[0].description\n                }`\n            );\n            setLoading(false);\n            return response;\n        } catch (error) {\n            setLoading(false);\n            console.error(error);\n            replyUser(\n                \"Ville non pris en charge pour le moment\"\n            );\n        }\n    };\n    const askForMeteo = () => {\n        setMeteo(true);\n    };\n    const closeMeteo = () => {\n        setMeteo(false);\n    };\n    const pushMessage = (msg = \"\", user = true) => {\n        setDialogs((prevState)=>[...prevState, { msg, id: prevState.length, user }]);\n    };\n    const sendRequest = (msg = \"\") => {\n        if (msg.length <= 0) return;\n        pushMessage(msg);\n    };\n    const replyUser = (msg = \"\") => {\n        if (msg.length <= 0) return;\n        speak({\n            text:msg\n        })\n        pushMessage(msg, false);\n    };\n    return (\n        <DialogContext.Provider\n            value={{\n                sendRequest,\n                id: dialogs.length,\n                dialogs,\n                city: initialState.city,\n                getMeteo,\n                meteoDialog,\n                askForMeteo,\n                replyUser,\n                closeMeteo,\n                loading,\n            }}\n        >\n            {children}\n        </DialogContext.Provider>\n    );\n};\n","/home/sitraka/haum-project/src/serviceWorker.js",[],"/home/sitraka/haum-project/src/App.jsx",["53","54"],"import React, { useState, useLayoutEffect } from \"react\";\nimport { css } from \"@emotion/css\";\nimport { motion } from \"framer-motion\";\nimport { Dialog } from \"./components/Dialog\";\nimport Projectinfo from \"./components/info/Projectinfo\";\nimport style from \"./assets/App.module.css\";\nimport { Settings, ChevronRight, ChevronLeft } from 'react-feather';\nimport Lottie from 'react-lottie';\nimport animationData from \"./Lotties/143850-cloud-robotics-abstract.json\";\n\n// 7 SEGMENT\nimport SevenSegmentDisplay from 'seven-segment-display';\nimport { Music } from \"./components/music\";\n\nconst setTime = number => number < 10 ? \"0\" + number : number\n\n\nfunction App() {\n    const [showModal, setShowModal] = useState(false)\n    const [artiste, setArtiste] = useState(\"\")\n    let newDate = new Date();\n    const [info, setInfo] = useState(false)\n    const [datehour, setDateHour] = useState({\n        jour: newDate.getDate(),\n        mois: newDate.getMonth() + 1,\n        année: newDate.getFullYear(),\n        heure: newDate.getHours(),\n        minutes: newDate.getMinutes(),\n        seconds: newDate.getSeconds(),\n    });\n\n    useLayoutEffect(() => {\n        setTimeout(() => {\n            newDate = new Date()\n            setDateHour({\n                jour: setTime(newDate.getDate()),\n                mois: setTime(newDate.getMonth() + 1),\n                année: setTime(newDate.getFullYear()),\n                heure: setTime(newDate.getHours()),\n                minutes: setTime(newDate.getMinutes()),\n                seconds: setTime(newDate.getSeconds())\n            })\n        }, 1000)\n    }, [datehour])\n    // const changement = (a, b) => {\n    //     setShowModal(a)\n    //     setArtiste(b)\n\n    // }\n    const showInfo = () => { setInfo(i => !i) }\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n        rendererSettings: {\n            preserveAspectRatio: \"xMidYMid slice\"\n        }\n    };\n\n    return (\n        <div\n            style={{ overflow: \"hidden\", position: \"relative\" }}\n        >\n            <div\n                className={\"container\"}\n                style={{ minHeight: \"100vh\", height: \"100%\", overflowX: \"hidden\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", flexDirection: \"column\" }}\n            >\n                <div>\n                    {/* <button onClick={() => setShowModal(true)}>show modal</button> */}\n                    {showModal && <Music artisteProps={artiste} onClearArtiste={setArtiste} modal={setShowModal} />}\n                    <Lottie\n                        options={defaultOptions}\n                        height={200}\n                        width={200}\n                    />\n                    <div className=\"row gx-5\">\n\n                        <div\n                            className={\"text-white col-sm-12 col-md-6 \"}\n                            style={{ marginTop: \"80px\" }}\n                        >\n                            <motion.h1\n                                style={{ fontSize: \"3em\" }}\n                                className={\"text-right\"}\n                                initial={{ opacity: 0, y: -80 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                transition={{ duration: 0.5 }}\n\n                            >\n                                Je suis R<span className={`${style.rotate}`}><Settings size=\"0.8em\" style={{ marginBottom: \"15px\" }} /></span>CC<span className={`${style.rotationInverse}`}><Settings size=\"0.8em\" style={{ marginBottom: \"15px\" }} /></span> <br />votre assistant\n                            </motion.h1>\n                            <p className={\"text-right mt-4\"} style={{ fontSize: \"3em\" }}>\n                                {datehour.jour} / {datehour.mois} / {datehour.année}\n                            </p>\n                            <p className={`text-right mt-4 ${style.digit}`} style={{ height: \"100px\", fontSize: \"3em\" }}>\n                                <SevenSegmentDisplay color={\"red\"} digitCount={2} value={datehour.heure} />:<SevenSegmentDisplay color={\"red\"} value={datehour.minutes} digitCount={2} />:<SevenSegmentDisplay color={\"red\"} value={datehour.seconds} digitCount={2} />\n                            </p>\n                            <button className=\"btn btn-outline-light\" onClick={() => showInfo()}>\n                                {!info ? \"En savoir plus sur nous\" : \"Fermer\"} {!info ? <ChevronRight /> : <ChevronLeft />}\n                            </button>\n\n                        </div>\n                        <div\n                            className={\"text-white col-sm-12 col-md-6\"}\n                            style={{ marginTop: \"80px\" }}\n                        >\n                            <Dialog onShow={setShowModal} onArtiste={setArtiste} />\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <Projectinfo showInfo={showInfo} info={info} />\n        </div>\n    );\n}\n\nexport default App;\n","/home/sitraka/haum-project/src/services/meteo.js",[],"/home/sitraka/haum-project/src/components/info/Projectinfo.jsx",[],"/home/sitraka/haum-project/src/components/Dialog.jsx",["55","56"],"\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { DialogContext } from \"../DialogContext\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { css } from \"@emotion/css\";\nimport DialogMeteo from \"./DialogMeteo\";\nimport SpeechRecognition, {\n    useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nimport { useSpeechSynthesis } from \"react-speech-kit\"\nimport BlaguesAPI from 'blagues-api';\nimport { Howl } from \"howler\";\n\nconst Msg = ({ children, user = true }) => {\n    return (\n        <motion.p\n            className={css({\n                margin: \"10px 0\",\n                fontSize: 32,\n                paddingBottom: 10,\n                textAlign: user ? \"right\" : \"left\",\n            })}\n            initial={{ opacity: 0, y: \"80px\" }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: \"-80px\" }}\n            transition={{ duration: 0.5 }}\n        >\n            {children}\n        </motion.p>\n    );\n};\n\nexport const Dialog = ({ onShow, onArtiste }) => {\n\n    const { speak } = useSpeechSynthesis();\n    const { dialogs, sendRequest, getMeteo, id, loading, replyUser } = useContext(DialogContext);\n    const [listen, setListen] = useState(false)\n    const inp = useRef(null);\n    const onClick = (e) => {\n        sendRequest(inp.current.value);\n        if (!inp.current.value) {\n            replyUser(\"Dites quelque chose !\")\n        } else {\n            setTimeout(function () {\n                replyUser('vous avez ecris ' + inp.current.value)\n                inp.current.value = null\n            }, 1000\n            )\n        }\n\n    };\n\n    const commands = [\n        {\n            command: \"Salut\",\n            callback: ({ command }) => {\n                console.log('command', command)\n            },\n        },\n        {\n            command: \"* météo * *\",\n            callback: (mot, pronom, city, { command, finalTranscript }) => {\n                getMeteo(city);\n                console.log('command', command)\n            },\n        },\n\n        {\n            command: \"raconte-moi * blague\",\n            callback: async () => {\n                const blague = new BlaguesAPI(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiODMxODYzMzA5MzcxNTcyMjQ1IiwibGltaXQiOjEwMCwia2V5IjoiSXNyVU5MOHR3WnhhNjBkTmJRUmxwU2UxZVlSbHNNcWdsdEpVV21tNzRVcWRJME50MHgiLCJjcmVhdGVkX2F0IjoiMjAyMy0wNy0wM1QxMjoyNDo0NiswMDowMCIsImlhdCI6MTY4ODM4NzA4Nn0.XDkCGavETYKlXCo3UaJbclqFAVh0VOdD2qmSY9tXzfw\");\n\n                const d = await blague.random({\n                    disallow: [\n                        blague.categories.DARK,\n                        blague.categories.LIMIT\n                    ]\n                })\n                speak({ text: d.joke })\n\n                speak({ text: d.answer })\n\n\n            }\n\n        },\n        {\n            command: \"album de *\",\n            callback: (standard) => {\n                const indexDe = standard.indexOf('de')\n                const artiste = standard.slice(indexDe + 1)\n\n                onArtiste(artiste)\n\n                onShow(x => !x)\n\n\n            }\n        },\n        {\n            command: \"comment vas-tu\",\n            callback: () => {\n                const reponse = [\"Je vais bien ...\", \"Pas mal\", \"Un bon chocolat chaud me fera du bien \", \"il fait froid mais bon ...\", \"Je suis en pleine forme\", \"ca va comme tous les jours\", \"il fait tres tres froid aujourd'hui\"]\n                const rand = Math.floor(Math.random() * reponse.length)\n                replyUser(reponse[rand])\n            }\n        },\n        {\n            command: \"au revoir\",\n            callback: () => {\n                const reponse = [\"A bientot\", \"Au revoir et bonne journee\", \"Au revoir et sois sage\", \"On se dit a bientot\", \"bye bye et a plus tard \"]\n                const rand = Math.floor(Math.random() * reponse.length)\n                replyUser(reponse[rand])\n            }\n        },\n        {\n            command: \"Bonjour\",\n            callback: () => {\n                const reponse = [\"Salutation \", \"Bonjour , content de vous revoir\", \"Bonjour Je suis votre Robot assistante \"]\n                const rand = Math.floor(Math.random() * reponse.length)\n                replyUser(reponse[rand])\n            }\n        },\n        {\n            command: \"* la musique\",\n            callback: async () => {\n                const url = 'https://spotify23.p.rapidapi.com/tracks/?ids=4WNcduiCmDNfmTEz7JvmLv';\n                const options = {\n                    method: 'GET',\n                    headers: {\n                        'X-RapidAPI-Key': 'cdd5c921b2mshd17a687b801af2dp1b17c1jsn8dc4709b9df0',\n                        'X-RapidAPI-Host': 'spotify23.p.rapidapi.com'\n                    }\n                };\n\n                try {\n                    const response = await fetch(url, options);\n                    const result = await response.json();\n                    const titre = \"titre de la musique :\" + result.tracks[0].name\n\n                    replyUser(titre)\n                    const src = result.tracks[0].preview_url\n                    // const src = \"../assets/music.mp3\"\n                    console.log(result.tracks[0].preview_url)\n                    const sound = new Howl({\n                        src,\n                        html5: true\n                    })\n                    setTimeout(() => {\n                        sound.play()\n\n                    }, 5000)\n                    setTimeout(() => {\n                        sound.pause()\n\n                    }, 10000)\n\n                    console.log(\"voici la musique :\", result);\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    ];\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) { console.log(\"browser is not supporting\") }\n    const { transcript, listening, finalTranscript } = useSpeechRecognition({\n        language: \"fr-FR\",\n        commands\n    })\n    const ecouter = async () => {\n        await SpeechRecognition.startListening({ language: \"fr-FR\" });\n    }\n    const stopListen = () => {\n        setListen(false)\n        SpeechRecognition.stopListening()\n    }\n    useEffect(() => {\n        sendRequest(finalTranscript);\n    }, [finalTranscript])\n    return (\n        <>\n            <AnimatePresence>\n                {dialogs.slice(id < 4 ? 0 : id - 3).map((value) => (\n                    <motion.p\n                        className={css({\n                            margin: \"10px 0\",\n                            fontSize: 32,\n                            paddingBottom: 10,\n                            textAlign: value.user ? \"right\" : \"left\",\n                        })}\n                        initial={{ opacity: 0, y: \"80px\" }}\n                        animate={{ opacity: 1, y: 0 }}\n                        exit={{ opacity: 0, y: \"-80px\" }}\n                        transition={{ duration: 0.5 }}\n                        key={value.id}\n                    >\n                        {value.msg}\n                    </motion.p>\n                ))}\n                {loading && <Msg key={\"im-searching\"} user={false}>Je cherche...</Msg>}\n                {listening && <Msg key={\"im-listening\"} user={false}>Je vous écoute</Msg>}\n                {listening && <Msg key={\"transcripting\"}>{transcript}</Msg>}\n            </AnimatePresence>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-sm-12 mb-2\">\n                        <input\n                            type=\"text\"\n                            ref={inp}\n                            id={\"meteo\"}\n                            className={\"form-control\"}\n                            placeholder={\"Demander de l'aide ...\"}\n                        />\n                    </div>\n                    <div className=\"row no-gutters\">\n                        <button className={\"col-sm-4 mb-4 mt-2 btn btn-success btn-block\"}\n                            onClick={onClick}\n                            style={{ borderTopRightRadius: \"0\", borderBottomRightRadius: \"0\" }}\n                        >Envoyer</button>\n                        <button\n                            className={\"col-sm-4 mb-4 mt-2 btn btn-outline-info btn-block\"}\n                            style={{ borderRadius: \"0\" }}\n                            onClick={ecouter}\n                        >\n                            Ecouter\n                        </button>\n                        <button className={\" col-sm-4 mb-4 mt-2 btn btn-danger btn-block\"}\n\n                            onClick={stopListen}\n                            style={{ borderTopLeftRadius: \"0\", borderBottomLeftRadius: \"0\" }}\n                        >\n                            Arreter\n                        </button>\n                    </div>\n\n                </div>\n            </div>\n            <DialogMeteo />\n        </>\n    );\n};\n","/home/sitraka/haum-project/src/components/DialogMeteo.jsx",[],"/home/sitraka/haum-project/src/components/ActionButton.jsx",[],"/home/sitraka/haum-project/src/components/animation.js",[],"/home/sitraka/haum-project/src/components/music.jsx",["57","58","59","60","61","62","63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":2,"column":27,"nodeType":"70","messageId":"71","endLine":2,"endColumn":46},{"ruleId":"68","severity":1,"message":"72","line":2,"column":10,"nodeType":"70","messageId":"71","endLine":2,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":34,"column":23,"nodeType":"75","endLine":34,"endColumn":33},{"ruleId":"68","severity":1,"message":"76","line":38,"column":12,"nodeType":"70","messageId":"71","endLine":38,"endColumn":18},{"ruleId":"73","severity":1,"message":"77","line":180,"column":8,"nodeType":"78","endLine":180,"endColumn":25,"suggestions":"79"},{"ruleId":"68","severity":1,"message":"80","line":1,"column":21,"nodeType":"70","messageId":"71","endLine":1,"endColumn":36},{"ruleId":"68","severity":1,"message":"81","line":3,"column":8,"nodeType":"70","messageId":"71","endLine":3,"endColumn":17},{"ruleId":"68","severity":1,"message":"82","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":12},{"ruleId":"68","severity":1,"message":"83","line":12,"column":10,"nodeType":"70","messageId":"71","endLine":12,"endColumn":19},{"ruleId":"73","severity":1,"message":"84","line":21,"column":15,"nodeType":"85","endLine":44,"endColumn":6},{"ruleId":"68","severity":1,"message":"86","line":62,"column":17,"nodeType":"70","messageId":"71","endLine":62,"endColumn":29},{"ruleId":"87","severity":1,"message":"88","line":62,"column":105,"nodeType":"89","messageId":"90","endLine":62,"endColumn":106},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'getMeteoForCityFake' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'newDate' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","NewExpression","'listen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sendRequest'. Either include it or remove the dependency array.","ArrayExpression",["93"],"'useLayoutEffect' is defined but never used.","'ListGroup' is defined but never used.","'Card' is defined but never used.","'CardGroup' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'Responsedata' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [finalTranscript, sendRequest]",{"range":"96","text":"97"},[6231,6248],"[finalTranscript, sendRequest]"]