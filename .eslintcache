[{"/home/tsiory/project/haum-project/src/index.jsx":"1","/home/tsiory/project/haum-project/src/serviceWorker.js":"2","/home/tsiory/project/haum-project/src/DialogContext.js":"3","/home/tsiory/project/haum-project/src/App.jsx":"4","/home/tsiory/project/haum-project/src/services/meteo.js":"5","/home/tsiory/project/haum-project/src/components/Dialog.jsx":"6","/home/tsiory/project/haum-project/src/components/info/Projectinfo.jsx":"7","/home/tsiory/project/haum-project/src/components/DialogMeteo.jsx":"8","/home/tsiory/project/haum-project/src/components/ActionButton.jsx":"9","/home/tsiory/project/haum-project/src/components/animation.js":"10"},{"size":581,"mtime":1663589028930,"results":"11","hashOfConfig":"12"},{"size":5086,"mtime":1663589028930,"results":"13","hashOfConfig":"12"},{"size":2427,"mtime":1663591090566,"results":"14","hashOfConfig":"12"},{"size":3959,"mtime":1663595813192,"results":"15","hashOfConfig":"12"},{"size":800,"mtime":1663589028930,"results":"16","hashOfConfig":"12"},{"size":4990,"mtime":1663595475395,"results":"17","hashOfConfig":"12"},{"size":1299,"mtime":1663596398801,"results":"18","hashOfConfig":"12"},{"size":2790,"mtime":1663595369960,"results":"19","hashOfConfig":"12"},{"size":728,"mtime":1663589028930,"results":"20","hashOfConfig":"12"},{"size":407,"mtime":1663589028930,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"6hspxy",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/tsiory/project/haum-project/src/index.jsx",[],["47","48"],"/home/tsiory/project/haum-project/src/serviceWorker.js",[],"/home/tsiory/project/haum-project/src/DialogContext.js",["49"],"import React, { createContext, useState } from \"react\";\nimport { getMeteoForCity, getMeteoForCityFake } from \"./services/meteo\";\nimport {useSpeechSynthesis} from \"react-speech-kit\"\nexport const DialogContext = createContext();\n\nconst initialState = {\n    dialogs: [\n        { msg: \"En quoi puis-je vous aider aujourd'hui?\", id: 0, user: false },\n    ],\n    city: [\"Antananarivo\", \"Mahajanga\", \"Paris\"],\n};\nexport const DialogProvider = ({ children }) => {\n    const [dialogs, setDialogs] = useState(initialState.dialogs);\n    const [loading, setLoading] = useState(false);\n    const [meteoDialog, setMeteo] = useState(false);\n    const {speak} = useSpeechSynthesis();\n    const getMeteo = async (city, msg = \"\") => {\n        console.log(\"city \", city);\n        setLoading(true);\n        closeMeteo();\n\n        try {\n            const response = await getMeteoForCity(city);\n            const data = response.data\n            console.log(\"response\", data);\n            replyUser(\n                `Meteo à ${city}: \n                Température ${Math.floor(data.main.temp)}° C,  ${\n                    data.weather[0].description\n                }`\n            );\n            setLoading(false);\n            return response;\n        } catch (error) {\n            setLoading(false);\n            console.error(error);\n            replyUser(\n                \"Ville non pris en charge pour le moment\"\n            );\n        }\n    };\n    const askForMeteo = () => {\n        setMeteo(true);\n    };\n    const closeMeteo = () => {\n        setMeteo(false);\n    };\n    const pushMessage = (msg = \"\", user = true) => {\n        setDialogs((prevState)=>[...prevState, { msg, id: prevState.length, user }]);\n    };\n    const sendRequest = (msg = \"\") => {\n        if (msg.length <= 0) return;\n        pushMessage(msg);\n    };\n    const replyUser = (msg = \"\") => {\n        if (msg.length <= 0) return;\n        speak({\n            text:msg\n        })\n        pushMessage(msg, false);\n    };\n    return (\n        <DialogContext.Provider\n            value={{\n                sendRequest,\n                id: dialogs.length,\n                dialogs,\n                city: initialState.city,\n                getMeteo,\n                meteoDialog,\n                askForMeteo,\n                replyUser,\n                closeMeteo,\n                loading,\n            }}\n        >\n            {children}\n        </DialogContext.Provider>\n    );\n};\n","/home/tsiory/project/haum-project/src/App.jsx",["50","51"],"import React, { useState, useLayoutEffect } from \"react\";\nimport {css} from \"@emotion/css\";\nimport {motion} from \"framer-motion\";\nimport {Dialog} from \"./components/Dialog\";\nimport Projectinfo from \"./components/info/Projectinfo\";\nimport style from \"./assets/App.module.css\";\nimport { Settings,ChevronRight,ChevronLeft } from 'react-feather';\n\n// 7 SEGMENT\nimport SevenSegmentDisplay from 'seven-segment-display';\n\nconst setTime =  number => number < 10 ? \"0\"+number : number\n\n\nfunction App() {\n    let newDate = new Date();\n    const [info,setInfo] = useState(false) \n    const [datehour,setDateHour] = useState({\n        jour: newDate.getDate(),\n        mois: newDate.getMonth() + 1,\n        année: newDate.getFullYear(),\n        heure: newDate.getHours(),\n        minutes: newDate.getMinutes(),\n        seconds: newDate.getSeconds(),\n    });\n\n    useLayoutEffect(()=> {\n        setTimeout(() => {\n            newDate = new Date()\n            setDateHour({\n                jour: setTime(newDate.getDate()),\n                mois: setTime(newDate.getMonth() + 1) ,\n                année: setTime(newDate.getFullYear()),\n                heure: setTime(newDate.getHours()),\n                minutes: setTime(newDate.getMinutes()),\n                seconds: setTime(newDate.getSeconds())\n            })\n        },1000)\n    },[datehour])\n\n    const showInfo = () => {setInfo(i => !i)}\n    \n    return (\n        <div\n            style={{overflow:\"hidden\",position:\"relative\"}}\n        >\n            <div\n                className={\"container\"}\n                style={{minHeight: \"100vh\",overflowX:\"hidden\",display:\"flex\",alignItems:\"center\",justifyContent:\"center\",flexDirection:\"column\"}}\n            >\n                <div>\n                <h3 style={{fontSize:\"8em\"}} className={\"text-white text-center\"}>R<span className={`${style.rotate}`}><Settings size=\"0.8em\"/></span>CC<Settings size=\"0.8em\"/></h3>\n                <div className=\"row gx-5\">\n\n                    <div\n                        className={\"text-white col-sm-12 col-md-6 \"}\n                        style={{marginTop:\"80px\"}}\n                    >\n                        <motion.h1\n                            style={{fontSize:\"4.5em\"}}\n                            className={\"text-right\"}\n                            initial={{ opacity: 0, y: -80 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            transition={{ duration: 0.5 }}\n                            \n                        >\n                            Je suis <span className={\"text-info\"}>R<Settings size=\"0.8em\"/>CC<Settings size=\"0.8em\"/></span> votre assistant\n                        </motion.h1>\n                        <p className={\"text-right mt-4\"} style={{fontSize:\"3em\"}}>\n                            {datehour.jour} / {datehour.mois} / {datehour.année}\n                        </p>\n                        <p className={`text-right mt-4 ${style.digit}`}  style={{height:\"100px\",fontSize:\"3em\"}}>\n                            <SevenSegmentDisplay color={\"red\"}  digitCount={2} value={datehour.heure}/>:<SevenSegmentDisplay color={\"red\"} value={datehour.minutes} digitCount={2}/>:<SevenSegmentDisplay color={\"red\"} value={datehour.seconds} digitCount={2}/>\n                        </p>\n                            <button className=\"btn btn-outline-light\" onClick={() => showInfo()}>\n                                {!info ? \"En savoir plus sur nous\" : \"Fermer\" } {!info ? <ChevronRight /> :<ChevronLeft />}\n                            </button>    \n                        \n                    </div>\n                    <div\n                        className={\"text-white col-sm-12 col-md-6\"}\n                        style={{marginTop:\"80px\"}}\n                    >\n                        <Dialog />\n                    </div>\n                </div>\n                </div>\n\n            </div>\n\n            <Projectinfo info={info}/>\n        </div>\n    );\n}\n\nexport default App;\n","/home/tsiory/project/haum-project/src/services/meteo.js",[],"/home/tsiory/project/haum-project/src/components/Dialog.jsx",["52","53"],"import React, { useContext,  useEffect,  useRef } from \"react\";\nimport { DialogContext } from \"../DialogContext\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { css } from \"@emotion/css\";\nimport DialogMeteo from \"./DialogMeteo\";\nimport SpeechRecognition, {\n    useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nconst Msg = ({ children, user = true }) => {\n    return (\n        <motion.p\n            className={css({\n                margin: \"10px 0\",\n                fontSize: 32,\n                paddingBottom: 10,\n                textAlign: user ? \"right\" : \"left\",\n            })}\n            initial={{ opacity: 0, y: \"80px\" }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: \"-80px\" }}\n            transition={{ duration: 0.5 }}\n        >\n            {children}\n        </motion.p>\n    );\n};\n\nexport const Dialog = () => {\n    const { dialogs, sendRequest, getMeteo,id, loading,replyUser } = useContext(DialogContext);\n    const inp = useRef(null);\n    const onClick = (e) => {\n        sendRequest(inp.current.value);\n        replyUser(\"hello\")\n        inp.current.value = null;\n    };\n    const commands = [\n        {\n            command: \"*\",\n            callback: (standard) => {\n                console.log('standard'+ standard);\n            }\n        },\n        {\n            command: \"Salut\",\n            callback: ({command}) => {\n                console.log('command', command)\n            },\n        },\n        {\n            command: \"Je voudrais savoir la météo * *\",\n            callback: (pronom,city,{command,finalTranscript}) => {\n                getMeteo(city);\n                console.log('command', command)\n            },\n        },\n    ];\n    \n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {console.log(\"browser is not supporting\")}\n\n\n    const { transcript, listening,finalTranscript } = useSpeechRecognition({\n        language: \"fr-FR\",\n        commands})\n    useEffect(()=>{\n        const msg = finalTranscript;\n        console.log('finalTranscript' + finalTranscript)\n        sendRequest(finalTranscript);\n    },[finalTranscript])\n    return (\n        <>\n            <AnimatePresence>\n                {dialogs.slice(id<4?0:id-3).map((value) => (\n                    <motion.p\n                        className={css({\n                            margin: \"10px 0\",\n                            fontSize: 32,\n                            paddingBottom: 10,\n                            textAlign: value.user ? \"right\" : \"left\",\n                        })}\n                        initial={{ opacity: 0, y: \"80px\" }}\n                        animate={{ opacity: 1, y: 0 }}\n                        exit={{ opacity: 0, y: \"-80px\" }}\n                        transition={{ duration: 0.5 }}\n                        key={value.id}\n                    >\n                        {value.msg}\n                    </motion.p>\n                ))}\n                {loading && <Msg key={\"im-searching\"} user={false}>Je cherche...</Msg>}\n                {listening && <Msg key={\"im-listening\"} user={false}>Je vous écoute</Msg>}\n                {listening && <Msg key={\"transcripting\"}>{transcript}</Msg>}\n            </AnimatePresence>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-sm-12 mb-2\">\n                        <input\n                            type=\"text\"\n                            ref={inp}\n                            id={\"meteo\"}\n                            className={\"form-control\"}\n                            placeholder={\"Demander de l'aide ...\"}\n                        />\n                    </div>\n                    <div className=\"row no-gutters\">\n                        <button className={\"col-sm-4 mb-4 mt-2 btn btn-success btn-block\"}\n                                onClick={onClick}\n                                style={{borderTopRightRadius:\"0\",borderBottomRightRadius:\"0\"}}\n                        >Envoyer</button>\n                        <button\n                            className={\"col-sm-4 mb-4 mt-2 btn btn-outline-info btn-block\"}\n                            style={{borderRadius:\"0\"}}\n                            onClick={async () => {\n                                await SpeechRecognition.startListening({ language: \"fr-FR\" });\n                              console.log(\"Micros on\")\n                            }}\n                        >\n                            Ecouter\n                        </button>\n                        <button className={\" col-sm-4 mb-4 mt-2 btn btn-danger btn-block\"}\n                                onClick={() => SpeechRecognition.stopListening()}\n                                style={{borderTopLeftRadius:\"0\",borderBottomLeftRadius:\"0\"}}\n                        >\n                            Arreter\n                        </button>\n                    </div>\n                 \n                </div>\n            </div>\n            <DialogMeteo />\n        </>\n    );\n};\n","/home/tsiory/project/haum-project/src/components/info/Projectinfo.jsx",[],"/home/tsiory/project/haum-project/src/components/DialogMeteo.jsx",[],"/home/tsiory/project/haum-project/src/components/ActionButton.jsx",[],"/home/tsiory/project/haum-project/src/components/animation.js",[],["54","55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":2,"column":27,"nodeType":"62","messageId":"63","endLine":2,"endColumn":46},{"ruleId":"60","severity":1,"message":"64","line":2,"column":9,"nodeType":"62","messageId":"63","endLine":2,"endColumn":12},{"ruleId":"65","severity":1,"message":"66","line":29,"column":23,"nodeType":"67","endLine":29,"endColumn":33},{"ruleId":"60","severity":1,"message":"68","line":66,"column":15,"nodeType":"62","messageId":"63","endLine":66,"endColumn":18},{"ruleId":"65","severity":1,"message":"69","line":69,"column":7,"nodeType":"70","endLine":69,"endColumn":24,"suggestions":"71"},{"ruleId":"56","replacedBy":"72"},{"ruleId":"58","replacedBy":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'getMeteoForCityFake' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'newDate' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","NewExpression","'msg' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sendRequest'. Either include it or remove the dependency array.","ArrayExpression",["76"],["74"],["75"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [finalTranscript, sendRequest]",{"range":"79","text":"80"},[2113,2130],"[finalTranscript, sendRequest]"]