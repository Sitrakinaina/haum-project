[{"C:\\Projet\\haum-project\\src\\index.jsx":"1","C:\\Projet\\haum-project\\src\\serviceWorker.js":"2","C:\\Projet\\haum-project\\src\\DialogContext.js":"3","C:\\Projet\\haum-project\\src\\App.jsx":"4","C:\\Projet\\haum-project\\src\\services\\meteo.js":"5","C:\\Projet\\haum-project\\src\\components\\info\\Projectinfo.jsx":"6","C:\\Projet\\haum-project\\src\\components\\Dialog.jsx":"7","C:\\Projet\\haum-project\\src\\components\\DialogMeteo.jsx":"8","C:\\Projet\\haum-project\\src\\components\\ActionButton.jsx":"9","C:\\Projet\\haum-project\\src\\components\\animation.js":"10"},{"size":599,"mtime":1659162522601,"results":"11","hashOfConfig":"12"},{"size":5227,"mtime":1659161928889,"results":"13","hashOfConfig":"12"},{"size":2507,"mtime":1663588848942,"results":"14","hashOfConfig":"12"},{"size":4367,"mtime":1663636246691,"results":"15","hashOfConfig":"12"},{"size":829,"mtime":1659161928890,"results":"16","hashOfConfig":"12"},{"size":3279,"mtime":1663657361750,"results":"17","hashOfConfig":"12"},{"size":5995,"mtime":1688387111993,"results":"18","hashOfConfig":"12"},{"size":2868,"mtime":1663656562872,"results":"19","hashOfConfig":"12"},{"size":754,"mtime":1659161928886,"results":"20","hashOfConfig":"12"},{"size":436,"mtime":1659161928888,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"tgbvgy",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projet\\haum-project\\src\\index.jsx",[],["46","47"],"C:\\Projet\\haum-project\\src\\serviceWorker.js",[],"C:\\Projet\\haum-project\\src\\DialogContext.js",["48"],"import React, { createContext, useState } from \"react\";\r\nimport { getMeteoForCity, getMeteoForCityFake } from \"./services/meteo\";\r\nimport {useSpeechSynthesis} from \"react-speech-kit\"\r\nexport const DialogContext = createContext();\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        { msg: \"En quoi puis-je vous aider aujourd'hui?\", id: 0, user: false },\r\n    ],\r\n    city: [\"Antananarivo\", \"Mahajanga\", \"Paris\"],\r\n};\r\nexport const DialogProvider = ({ children }) => {\r\n    const [dialogs, setDialogs] = useState(initialState.dialogs);\r\n    const [loading, setLoading] = useState(false);\r\n    const [meteoDialog, setMeteo] = useState(false);\r\n    const {speak} = useSpeechSynthesis();\r\n    const getMeteo = async (city, msg = \"\") => {\r\n        console.log(\"city \", city);\r\n        setLoading(true);\r\n        closeMeteo();\r\n\r\n        try {\r\n            const response = await getMeteoForCity(city);\r\n            const data = response.data\r\n            console.log(\"response\", data);\r\n            replyUser(\r\n                `Meteo à ${city}: \r\n                Température ${Math.floor(data.main.temp)}° C,  ${\r\n                    data.weather[0].description\r\n                }`\r\n            );\r\n            setLoading(false);\r\n            return response;\r\n        } catch (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n            replyUser(\r\n                \"Ville non pris en charge pour le moment\"\r\n            );\r\n        }\r\n    };\r\n    const askForMeteo = () => {\r\n        setMeteo(true);\r\n    };\r\n    const closeMeteo = () => {\r\n        setMeteo(false);\r\n    };\r\n    const pushMessage = (msg = \"\", user = true) => {\r\n        setDialogs((prevState)=>[...prevState, { msg, id: prevState.length, user }]);\r\n    };\r\n    const sendRequest = (msg = \"\") => {\r\n        if (msg.length <= 0) return;\r\n        pushMessage(msg);\r\n    };\r\n    const replyUser = (msg = \"\") => {\r\n        if (msg.length <= 0) return;\r\n        speak({\r\n            text:msg\r\n        })\r\n        pushMessage(msg, false);\r\n    };\r\n    return (\r\n        <DialogContext.Provider\r\n            value={{\r\n                sendRequest,\r\n                id: dialogs.length,\r\n                dialogs,\r\n                city: initialState.city,\r\n                getMeteo,\r\n                meteoDialog,\r\n                askForMeteo,\r\n                replyUser,\r\n                closeMeteo,\r\n                loading,\r\n            }}\r\n        >\r\n            {children}\r\n        </DialogContext.Provider>\r\n    );\r\n};\r\n","C:\\Projet\\haum-project\\src\\App.jsx",["49"],"import React, { useState, useLayoutEffect } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Dialog } from \"./components/Dialog\";\r\nimport Projectinfo from \"./components/info/Projectinfo\";\r\nimport style from \"./assets/App.module.css\";\r\nimport { Settings, ChevronDown, ChevronUp } from 'react-feather';\r\n\r\n// 7 SEGMENT\r\nimport SevenSegmentDisplay from 'seven-segment-display';\r\n\r\nconst setTime = number => number < 10 ? \"0\" + number : number\r\n\r\n\r\nfunction App() {\r\n    let newDate = new Date();\r\n    const [info, setInfo] = useState(false)\r\n    const [datehour, setDateHour] = useState({\r\n        jour: newDate.getDate(),\r\n        mois: newDate.getMonth() + 1,\r\n        année: newDate.getFullYear(),\r\n        heure: newDate.getHours(),\r\n        minutes: newDate.getMinutes(),\r\n        seconds: newDate.getSeconds(),\r\n    });\r\n\r\n    useLayoutEffect(() => {\r\n        setTimeout(() => {\r\n            newDate = new Date()\r\n            setDateHour({\r\n                jour: setTime(newDate.getDate()),\r\n                mois: setTime(newDate.getMonth() + 1),\r\n                année: setTime(newDate.getFullYear()),\r\n                heure: setTime(newDate.getHours()),\r\n                minutes: setTime(newDate.getMinutes()),\r\n                seconds: setTime(newDate.getSeconds())\r\n            })\r\n        }, 1000)\r\n    }, [datehour])\r\n\r\n    const showInfo = () => { setInfo(i => !i) }\r\n\r\n    return (\r\n        <div\r\n            style={{ overflow: \"hidden\", position: \"relative\" }}\r\n        >\r\n            <div\r\n                className={\"container\"}\r\n                style={{ minHeight: \"100vh\", overflowX: \"hidden\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", flexDirection: \"column\" }}\r\n            >\r\n                <div>\r\n                    <motion.h3\r\n                        style={{ fontSize: \"8em\" }}\r\n                        className={\"text-white text-center\"}\r\n\r\n                        initial={{ opacity: 0, y: -80 }}\r\n                        animate={{ opacity: 1, y: 0 }}\r\n                        transition={{ duration: 0.5, delay: 0.2 }}\r\n                    >R<span className={`${style.rotate}`}><Settings size=\"0.8em\" /></span>C<Settings size=\"0.8em\" /></motion.h3>\r\n                    <div className=\"row gx-5\">\r\n\r\n                        <div\r\n                            className={\"text-white col-sm-12 col-md-6 \"}\r\n                            style={{ marginTop: \"80px\" }}\r\n                        >\r\n                            <motion.h1\r\n                                style={{ fontSize: \"4.5em\" }}\r\n                                initial={{ opacity: 0, y: -80 }}\r\n                                animate={{ opacity: 1, y: 0 }}\r\n                                transition={{ duration: 0.5, delay: 0.4 }}\r\n\r\n                            >\r\n                                Je suis <span className={\"text-info\"}>R<Settings size=\"0.8em\" />C<Settings size=\"0.8em\" /></span> votre assistant\r\n                            </motion.h1>\r\n                            <p className={\"text-right mt-4\"} style={{ fontSize: \"3em\" }}>\r\n                                {datehour.jour} / {datehour.mois} / {datehour.année}\r\n                            </p>\r\n                            <p className={`text-right mt-4 ${style.digit}`} style={{ height: \"100px\", fontSize: \"3em\" }}>\r\n                                <SevenSegmentDisplay color={\"red\"} digitCount={2} value={datehour.heure} />:<SevenSegmentDisplay color={\"red\"} value={datehour.minutes} digitCount={2} />:<SevenSegmentDisplay color={\"red\"} value={datehour.seconds} digitCount={2} />\r\n                            </p>\r\n                            <button className=\"btn btn-outline-light\" onClick={() => showInfo()}>\r\n                                {!info ? \"En savoir plus sur nous\" : \"Fermer\"} {!info ? <ChevronDown /> : <ChevronUp />}\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div\r\n                            className={\"text-white col-sm-12 col-md-6\"}\r\n                            style={{ marginTop: \"80px\" }}\r\n                        >\r\n                            <Dialog />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <Projectinfo showInfo={showInfo} info={info} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Projet\\haum-project\\src\\services\\meteo.js",[],"C:\\Projet\\haum-project\\src\\components\\info\\Projectinfo.jsx",[],"C:\\Projet\\haum-project\\src\\components\\Dialog.jsx",["50","51"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { DialogContext } from \"../DialogContext\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { css } from \"@emotion/css\";\r\nimport DialogMeteo from \"./DialogMeteo\";\r\nimport SpeechRecognition, {\r\n    useSpeechRecognition,\r\n} from \"react-speech-recognition\";\r\n\r\nimport { useSpeechSynthesis } from \"react-speech-kit\"\r\nimport BlaguesAPI from 'blagues-api';\r\n\r\nconst Msg = ({ children, user = true }) => {\r\n    return (\r\n        <motion.p\r\n            className={css({\r\n                margin: \"10px 0\",\r\n                fontSize: 32,\r\n                paddingBottom: 10,\r\n                textAlign: user ? \"right\" : \"left\",\r\n            })}\r\n            initial={{ opacity: 0, y: \"80px\" }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: \"-80px\" }}\r\n            transition={{ duration: 0.5 }}\r\n        >\r\n            {children}\r\n        </motion.p>\r\n    );\r\n};\r\n\r\nexport const Dialog = () => {\r\n\r\n    const { speak } = useSpeechSynthesis();\r\n    const { dialogs, sendRequest, getMeteo, id, loading, replyUser } = useContext(DialogContext);\r\n    const [listen, setListen] = useState(false)\r\n    const inp = useRef(null);\r\n    const onClick = (e) => {\r\n        sendRequest(inp.current.value);\r\n        replyUser(\"hello\")\r\n        inp.current.value = null;\r\n    };\r\n    const commands = [\r\n        {\r\n            command: \"*\",\r\n            callback: (standard) => {\r\n                console.log('standard' + standard);\r\n            }\r\n        },\r\n        {\r\n            command: \"Salut\",\r\n            callback: ({ command }) => {\r\n                console.log('command', command)\r\n            },\r\n        },\r\n        {\r\n            command: \"* météo * *\",\r\n            callback: (mot, pronom, city, { command, finalTranscript }) => {\r\n                getMeteo(city);\r\n                console.log('command', command)\r\n            },\r\n        },\r\n        {\r\n            command: \"raconte-moi * blague\",\r\n            callback: async () => {\r\n                const blague = new BlaguesAPI(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiODMxODYzMzA5MzcxNTcyMjQ1IiwibGltaXQiOjEwMCwia2V5IjoiSXNyVU5MOHR3WnhhNjBkTmJRUmxwU2UxZVlSbHNNcWdsdEpVV21tNzRVcWRJME50MHgiLCJjcmVhdGVkX2F0IjoiMjAyMy0wNy0wM1QxMjoyNDo0NiswMDowMCIsImlhdCI6MTY4ODM4NzA4Nn0.XDkCGavETYKlXCo3UaJbclqFAVh0VOdD2qmSY9tXzfw\");\r\n\r\n                const d = await blague.random({\r\n                    disallow: [\r\n                        blague.categories.DARK,\r\n                        blague.categories.LIMIT\r\n                    ]\r\n                })\r\n                speak({ text: d.joke })\r\n\r\n                speak({ text: d.answer })\r\n            }\r\n        }\r\n    ];\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) { console.log(\"browser is not supporting\") }\r\n    const { transcript, listening, finalTranscript } = useSpeechRecognition({\r\n        language: \"fr-FR\",\r\n        commands\r\n    })\r\n    const ecouter = async () => {\r\n        await SpeechRecognition.startListening({ language: \"fr-FR\" });\r\n    }\r\n    const stopListen = () => {\r\n        setListen(false)\r\n        SpeechRecognition.stopListening()\r\n    }\r\n    useEffect(() => {\r\n        sendRequest(finalTranscript);\r\n    }, [finalTranscript])\r\n    return (\r\n        <>\r\n            <AnimatePresence>\r\n                {dialogs.slice(id < 4 ? 0 : id - 3).map((value) => (\r\n                    <motion.p\r\n                        className={css({\r\n                            margin: \"10px 0\",\r\n                            fontSize: 32,\r\n                            paddingBottom: 10,\r\n                            textAlign: value.user ? \"right\" : \"left\",\r\n                        })}\r\n                        initial={{ opacity: 0, y: \"80px\" }}\r\n                        animate={{ opacity: 1, y: 0 }}\r\n                        exit={{ opacity: 0, y: \"-80px\" }}\r\n                        transition={{ duration: 0.5 }}\r\n                        key={value.id}\r\n                    >\r\n                        {value.msg}\r\n                    </motion.p>\r\n                ))}\r\n                {loading && <Msg key={\"im-searching\"} user={false}>Je cherche...</Msg>}\r\n                {listening && <Msg key={\"im-listening\"} user={false}>Je vous écoute</Msg>}\r\n                {listening && <Msg key={\"transcripting\"}>{transcript}</Msg>}\r\n            </AnimatePresence>\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12 mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            ref={inp}\r\n                            id={\"meteo\"}\r\n                            className={\"form-control\"}\r\n                            placeholder={\"Demander de l'aide ...\"}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row no-gutters\">\r\n                        <button className={\"col-sm-4 mb-4 mt-2 btn btn-success btn-block\"}\r\n                            onClick={onClick}\r\n                            style={{ borderTopRightRadius: \"0\", borderBottomRightRadius: \"0\" }}\r\n                        >Envoyer</button>\r\n                        <button\r\n                            className={\"col-sm-4 mb-4 mt-2 btn btn-outline-info btn-block\"}\r\n                            style={{ borderRadius: \"0\" }}\r\n                            onClick={ecouter}\r\n                        >\r\n                            Ecouter\r\n                        </button>\r\n                        <button className={\" col-sm-4 mb-4 mt-2 btn btn-danger btn-block\"}\r\n                            onClick={stopListen}\r\n                            style={{ borderTopLeftRadius: \"0\", borderBottomLeftRadius: \"0\" }}\r\n                        >\r\n                            Arreter\r\n                        </button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <DialogMeteo />\r\n        </>\r\n    );\r\n};\r\n","C:\\Projet\\haum-project\\src\\components\\DialogMeteo.jsx",[],"C:\\Projet\\haum-project\\src\\components\\ActionButton.jsx",[],"C:\\Projet\\haum-project\\src\\components\\animation.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":27,"nodeType":"58","messageId":"59","endLine":2,"endColumn":46},{"ruleId":"60","severity":1,"message":"61","line":28,"column":23,"nodeType":"62","endLine":28,"endColumn":33},{"ruleId":"56","severity":1,"message":"63","line":36,"column":12,"nodeType":"58","messageId":"59","endLine":36,"endColumn":18},{"ruleId":"60","severity":1,"message":"64","line":94,"column":8,"nodeType":"65","endLine":94,"endColumn":25,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'getMeteoForCityFake' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'newDate' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","NewExpression","'listen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sendRequest'. Either include it or remove the dependency array.","ArrayExpression",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [finalTranscript, sendRequest]",{"range":"72","text":"73"},[3283,3300],"[finalTranscript, sendRequest]"]