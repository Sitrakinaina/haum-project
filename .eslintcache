[{"C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\index.jsx":"1","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\serviceWorker.js":"2","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\DialogContext.js":"3","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\App.jsx":"4","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\services\\meteo.js":"5","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\Dialog.jsx":"6","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\info\\Projectinfo.jsx":"7","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\DialogMeteo.jsx":"8","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\ActionButton.jsx":"9","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\animation.js":"10"},{"size":599,"mtime":1688365225671,"results":"11","hashOfConfig":"12"},{"size":5227,"mtime":1688365225678,"results":"13","hashOfConfig":"12"},{"size":2507,"mtime":1688365225656,"results":"14","hashOfConfig":"12"},{"size":4613,"mtime":1688454793855,"results":"15","hashOfConfig":"12"},{"size":829,"mtime":1688365225678,"results":"16","hashOfConfig":"12"},{"size":5393,"mtime":1688374320677,"results":"17","hashOfConfig":"12"},{"size":1335,"mtime":1688365225671,"results":"18","hashOfConfig":"12"},{"size":2868,"mtime":1688365225671,"results":"19","hashOfConfig":"12"},{"size":754,"mtime":1688365225656,"results":"20","hashOfConfig":"12"},{"size":436,"mtime":1688365225671,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"10mknid",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\index.jsx",[],["45","46"],"C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\serviceWorker.js",[],"C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\DialogContext.js",["47"],"import React, { createContext, useState } from \"react\";\r\nimport { getMeteoForCity, getMeteoForCityFake } from \"./services/meteo\";\r\nimport {useSpeechSynthesis} from \"react-speech-kit\"\r\nexport const DialogContext = createContext();\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        { msg: \"En quoi puis-je vous aider aujourd'hui?\", id: 0, user: false },\r\n    ],\r\n    city: [\"Antananarivo\", \"Mahajanga\", \"Paris\"],\r\n};\r\nexport const DialogProvider = ({ children }) => {\r\n    const [dialogs, setDialogs] = useState(initialState.dialogs);\r\n    const [loading, setLoading] = useState(false);\r\n    const [meteoDialog, setMeteo] = useState(false);\r\n    const {speak} = useSpeechSynthesis();\r\n    const getMeteo = async (city, msg = \"\") => {\r\n        console.log(\"city \", city);\r\n        setLoading(true);\r\n        closeMeteo();\r\n\r\n        try {\r\n            const response = await getMeteoForCity(city);\r\n            const data = response.data\r\n            console.log(\"response\", data);\r\n            replyUser(\r\n                `Meteo à ${city}: \r\n                Température ${Math.floor(data.main.temp)}° C,  ${\r\n                    data.weather[0].description\r\n                }`\r\n            );\r\n            setLoading(false);\r\n            return response;\r\n        } catch (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n            replyUser(\r\n                \"Ville non pris en charge pour le moment\"\r\n            );\r\n        }\r\n    };\r\n    const askForMeteo = () => {\r\n        setMeteo(true);\r\n    };\r\n    const closeMeteo = () => {\r\n        setMeteo(false);\r\n    };\r\n    const pushMessage = (msg = \"\", user = true) => {\r\n        setDialogs((prevState)=>[...prevState, { msg, id: prevState.length, user }]);\r\n    };\r\n    const sendRequest = (msg = \"\") => {\r\n        if (msg.length <= 0) return;\r\n        pushMessage(msg);\r\n    };\r\n    const replyUser = (msg = \"\") => {\r\n        if (msg.length <= 0) return;\r\n        speak({\r\n            text:msg\r\n        })\r\n        pushMessage(msg, false);\r\n    };\r\n    return (\r\n        <DialogContext.Provider\r\n            value={{\r\n                sendRequest,\r\n                id: dialogs.length,\r\n                dialogs,\r\n                city: initialState.city,\r\n                getMeteo,\r\n                meteoDialog,\r\n                askForMeteo,\r\n                replyUser,\r\n                closeMeteo,\r\n                loading,\r\n            }}\r\n        >\r\n            {children}\r\n        </DialogContext.Provider>\r\n    );\r\n};\r\n","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\App.jsx",["48","49"],"C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\services\\meteo.js",[],"C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\Dialog.jsx",["50","51"],"import React, { useContext, useEffect, useRef } from \"react\";\r\nimport { DialogContext } from \"../DialogContext\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { css } from \"@emotion/css\";\r\nimport DialogMeteo from \"./DialogMeteo\";\r\nimport SpeechRecognition, {\r\n    useSpeechRecognition,\r\n} from \"react-speech-recognition\";\r\n\r\nconst Msg = ({ children, user = true }) => {\r\n    return (\r\n        <motion.p\r\n            className={css({\r\n                margin: \"10px 0\",\r\n                fontSize: 32,\r\n                paddingBottom: 10,\r\n                textAlign: user ? \"right\" : \"left\",\r\n            })}\r\n            initial={{ opacity: 0, y: \"80px\" }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: \"-80px\" }}\r\n            transition={{ duration: 0.5 }}\r\n        >\r\n            {children}\r\n        </motion.p>\r\n    );\r\n};\r\n\r\nexport const Dialog = () => {\r\n    const { dialogs, sendRequest, getMeteo, id, loading, replyUser } = useContext(DialogContext);\r\n    const inp = useRef(null);\r\n    const onClick = (e) => {\r\n        sendRequest(inp.current.value);\r\n        if (!inp.current.value) {\r\n            replyUser(\"Dites quelque chose !\")\r\n        } else {\r\n            setTimeout(function () {\r\n                console.log(inp);\r\n                replyUser('vous avez ecris ' + inp.current.value)\r\n            }, 1000\r\n            )\r\n        }\r\n\r\n        inp.current.value = null;\r\n    };\r\n\r\n    const commands = [\r\n        {\r\n            command: \"*\",\r\n            callback: (standard) => {\r\n                console.log('standard' + standard);\r\n            }\r\n        },\r\n        {\r\n            command: \"Salut\",\r\n            callback: ({ command }) => {\r\n                console.log('command', command)\r\n            },\r\n        },\r\n        {\r\n            command: \"Je voudrais savoir la météo * *\",\r\n            callback: (pronom, city, { command, finalTranscript }) => {\r\n                getMeteo(city);\r\n                console.log('command', command)\r\n            },\r\n        },\r\n    ];\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) { console.log(\"browser is not supporting\") }\r\n\r\n\r\n    const { transcript, listening, finalTranscript } = useSpeechRecognition({\r\n        language: \"fr-FR\",\r\n        commands\r\n    })\r\n    useEffect(() => {\r\n        const msg = finalTranscript;\r\n        console.log('finalTranscript' + finalTranscript)\r\n        sendRequest(finalTranscript);\r\n    }, [finalTranscript])\r\n    return (\r\n        <>\r\n            <AnimatePresence>\r\n                {dialogs.slice(id < 4 ? 0 : id - 3).map((value) => (\r\n                    <motion.p\r\n                        className={css({\r\n                            margin: \"10px 0\",\r\n                            fontSize: 32,\r\n                            paddingBottom: 10,\r\n                            textAlign: value.user ? \"right\" : \"left\",\r\n                        })}\r\n                        initial={{ opacity: 0, y: \"80px\" }}\r\n                        animate={{ opacity: 1, y: 0 }}\r\n                        exit={{ opacity: 0, y: \"-80px\" }}\r\n                        transition={{ duration: 0.5 }}\r\n                        key={value.id}\r\n                    >\r\n                        {value.msg}\r\n                    </motion.p>\r\n                ))}\r\n                {loading && <Msg key={\"im-searching\"} user={false}>Je cherche...</Msg>}\r\n                {listening && <Msg key={\"im-listening\"} user={false}>Je vous écoute</Msg>}\r\n                {listening && <Msg key={\"transcripting\"}>{transcript}</Msg>}\r\n            </AnimatePresence>\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12 mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            ref={inp}\r\n                            id={\"meteo\"}\r\n                            className={\"form-control\"}\r\n                            placeholder={\"Demander de l'aide ...\"}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row no-gutters\">\r\n                        <button className={\"col-sm-4 mb-4 mt-2 btn btn-success btn-block\"}\r\n                            onClick={onClick}\r\n                            style={{ borderTopRightRadius: \"0\", borderBottomRightRadius: \"0\" }}\r\n                        >Envoyer</button>\r\n                        <button\r\n                            className={\"col-sm-4 mb-4 mt-2 btn btn-outline-info btn-block\"}\r\n                            style={{ borderRadius: \"0\" }}\r\n                            onClick={async () => {\r\n                                await SpeechRecognition.startListening({ language: \"fr-FR\" });\r\n                                console.log(\"Micros on\")\r\n                            }}\r\n                        >\r\n                            Ecouter\r\n                        </button>\r\n                        <button className={\" col-sm-4 mb-4 mt-2 btn btn-danger btn-block\"}\r\n                            onClick={() => SpeechRecognition.stopListening()}\r\n                            style={{ borderTopLeftRadius: \"0\", borderBottomLeftRadius: \"0\" }}\r\n                        >\r\n                            Arreter\r\n                        </button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <DialogMeteo />\r\n        </>\r\n    );\r\n};\r\n","C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\info\\Projectinfo.jsx",[],"C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\DialogMeteo.jsx",[],"C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\ActionButton.jsx",[],"C:\\Users\\Ranaivoarilala\\Desktop\\haum-project\\src\\components\\animation.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":27,"nodeType":"58","messageId":"59","endLine":2,"endColumn":46},{"ruleId":"56","severity":1,"message":"60","line":2,"column":10,"nodeType":"58","messageId":"59","endLine":2,"endColumn":13},{"ruleId":"61","severity":1,"message":"62","line":31,"column":23,"nodeType":"63","endLine":31,"endColumn":33},{"ruleId":"56","severity":1,"message":"64","line":77,"column":15,"nodeType":"58","messageId":"59","endLine":77,"endColumn":18},{"ruleId":"61","severity":1,"message":"65","line":80,"column":8,"nodeType":"66","endLine":80,"endColumn":25,"suggestions":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'getMeteoForCityFake' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'newDate' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","NewExpression","'msg' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sendRequest'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [finalTranscript, sendRequest]",{"range":"73","text":"74"},[2461,2478],"[finalTranscript, sendRequest]"]
