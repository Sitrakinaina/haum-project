[{"C:\\HAUM\\Interface\\haum\\src\\index.jsx":"1","C:\\HAUM\\Interface\\haum\\src\\serviceWorker.js":"2","C:\\HAUM\\Interface\\haum\\src\\DialogContext.js":"3","C:\\HAUM\\Interface\\haum\\src\\App.jsx":"4","C:\\HAUM\\Interface\\haum\\src\\services\\meteo.js":"5","C:\\HAUM\\Interface\\haum\\src\\components\\Dialog.jsx":"6","C:\\HAUM\\Interface\\haum\\src\\components\\DialogMeteo.jsx":"7","C:\\HAUM\\Interface\\haum\\src\\components\\ActionButton.jsx":"8","C:\\HAUM\\Interface\\haum\\src\\components\\animation.js":"9","C:\\HAUM\\Interface\\haum\\src\\components\\info\\Projectinfo.jsx":"10"},{"size":599,"mtime":1609825013951,"results":"11","hashOfConfig":"12"},{"size":5227,"mtime":1609822223845,"results":"13","hashOfConfig":"12"},{"size":2413,"mtime":1609822223840,"results":"14","hashOfConfig":"12"},{"size":3266,"mtime":1609837211111,"results":"15","hashOfConfig":"12"},{"size":829,"mtime":1609822223847,"results":"16","hashOfConfig":"12"},{"size":5285,"mtime":1609834401084,"results":"17","hashOfConfig":"12"},{"size":2837,"mtime":1609831137538,"results":"18","hashOfConfig":"12"},{"size":754,"mtime":1609830783998,"results":"19","hashOfConfig":"12"},{"size":436,"mtime":1609822223843,"results":"20","hashOfConfig":"12"},{"size":1348,"mtime":1609840282978,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1enota2",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\HAUM\\Interface\\haum\\src\\index.jsx",[],"C:\\HAUM\\Interface\\haum\\src\\serviceWorker.js",[],"C:\\HAUM\\Interface\\haum\\src\\DialogContext.js",["45"],"C:\\HAUM\\Interface\\haum\\src\\App.jsx",["46","47"],"C:\\HAUM\\Interface\\haum\\src\\services\\meteo.js",[],"C:\\HAUM\\Interface\\haum\\src\\components\\Dialog.jsx",["48","49"],"import React, { useContext,  useEffect,  useRef } from \"react\";\r\nimport { DialogContext } from \"../DialogContext\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { css } from \"@emotion/css\";\r\nimport DialogMeteo from \"./DialogMeteo\";\r\nimport SpeechRecognition, {\r\n    useSpeechRecognition,\r\n} from \"react-speech-recognition\";\r\n\r\nconst Msg = ({ children, user = true }) => {\r\n    return (\r\n        <motion.p\r\n            className={css({\r\n                margin: \"10px 0\",\r\n                fontSize: 32,\r\n                paddingBottom: 10,\r\n                textAlign: user ? \"right\" : \"left\",\r\n            })}\r\n            initial={{ opacity: 0, y: \"80px\" }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: \"-80px\" }}\r\n            transition={{ duration: 0.5 }}\r\n        >\r\n            {children}\r\n        </motion.p>\r\n    );\r\n};\r\n\r\nexport const Dialog = () => {\r\n    const { dialogs, sendRequest, getMeteo,id, loading,replyUser } = useContext(DialogContext);\r\n    const inp = useRef(null);\r\n    const onClick = (e) => {\r\n        sendRequest(inp.current.value);\r\n        replyUser(\"hello\")\r\n        inp.current.value = null;\r\n    };\r\n    const commands = [\r\n        {\r\n            command: \"*\",\r\n            callback: (standard) => {\r\n                console.log('standard'+ standard);\r\n            }\r\n        },\r\n        {\r\n            command: \"Salut\",\r\n            callback: ({command}) => {\r\n                console.log('command', command)\r\n            },\r\n        },\r\n        {\r\n            command: \"Je voudrais savoir la météo * *\",\r\n            callback: (pronom,city,{command,finalTranscript}) => {\r\n                getMeteo(city);\r\n                console.log('command', command)\r\n            },\r\n        },\r\n    ];\r\n    \r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {console.log(\"browser is not supporting\")}\r\n\r\n\r\n    const { transcript, listening,finalTranscript } = useSpeechRecognition({\r\n        language: \"fr-FR\",\r\n        commands})\r\n    useEffect(()=>{\r\n        const msg = finalTranscript;\r\n        console.log('finalTranscript' + finalTranscript)\r\n        sendRequest(finalTranscript);\r\n    },[finalTranscript])\r\n    return (\r\n        <>\r\n            <AnimatePresence>\r\n                {dialogs.slice(id<4?0:id-3).map((value) => (\r\n                    <motion.p\r\n                        className={css({\r\n                            margin: \"10px 0\",\r\n                            fontSize: 32,\r\n                            paddingBottom: 10,\r\n                            textAlign: value.user ? \"right\" : \"left\",\r\n                        })}\r\n                        initial={{ opacity: 0, y: \"80px\" }}\r\n                        animate={{ opacity: 1, y: 0 }}\r\n                        exit={{ opacity: 0, y: \"-80px\" }}\r\n                        transition={{ duration: 0.5 }}\r\n                        key={value.id}\r\n                    >\r\n                        {value.msg}\r\n                    </motion.p>\r\n                ))}\r\n                {loading && <Msg key={\"im-searching\"} user={false}>Je cherche...</Msg>}\r\n                {listening && <Msg key={\"im-listening\"} user={false}>Je vous écoute</Msg>}\r\n                {listening && <Msg key={\"transcripting\"}>{transcript}</Msg>}\r\n            </AnimatePresence>\r\n            <div className={css({ margin: 10 })}>\r\n                <div className=\"row no-gutters\">\r\n                    <div className=\"col-sm-12 mb-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            ref={inp}\r\n                            id={\"meteo\"}\r\n                            className={\"form-control\"}\r\n                            placeholder={\"Demander de l'aide ...\"}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-xs-4 col-sm-4 mb-4 mt-2\">\r\n                        <button className={\"btn btn-success btn-block\"}\r\n                                onClick={onClick}\r\n                                style={{borderTopRightRadius:\"0\",borderBottomRightRadius:\"0\"}}\r\n                        >Envoyer</button>\r\n\r\n                    </div>\r\n                    <div className=\"col-xs-4 col-sm-4 mb-4 mt-2\">\r\n                        <button\r\n                            className={\"btn btn-info btn-block\"}\r\n                            style={{borderRadius:\"0\"}}\r\n                            onClick={async () => {\r\n                                await SpeechRecognition.startListening({ language: \"fr-FR\" });\r\n                              console.log(\"Micros on\")\r\n                            }}\r\n                        >\r\n                            Ecouter\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-xs-4 col-sm-4 mb4 mt-2\">\r\n                        <button className={\"btn btn-danger btn-block\"}\r\n                                onClick={() => SpeechRecognition.stopListening()}\r\n                                style={{borderTopLeftRadius:\"0\",borderBottomLeftRadius:\"0\"}}\r\n                        >\r\n                            Arreter\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <DialogMeteo />\r\n        </>\r\n    );\r\n};\r\n",["50","51"],"C:\\HAUM\\Interface\\haum\\src\\components\\DialogMeteo.jsx",["52"],"import React, { useContext, useRef } from \"react\";\r\nimport { DialogContext } from \"../DialogContext\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { css } from \"@emotion/css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport { ActionButton, ActionButtonList } from \"./ActionButton.jsx\";\r\n\r\nconst DialogMeteo = ({ children }) => {\r\n    const {\r\n        city,\r\n        getMeteo,\r\n        askForMeteo,\r\n        closeMeteo,\r\n        meteoDialog,\r\n        sendRequest,\r\n    } = useContext(DialogContext);\r\n\r\n    const sinp = useRef(null);\r\n\r\n    const searchForMeteo = () => {\r\n        const city = sinp.current.value;\r\n        getMeteo();\r\n        closeMeteo();\r\n    };\r\n    return (\r\n        <>\r\n            <ActionButtonList>\r\n                {!meteoDialog ? (\r\n                    <ActionButton onClick={askForMeteo}>\r\n                        Chercher la m&eacute;t&eacute;o à ...\r\n                    </ActionButton>\r\n                ) : (\r\n                    <ActionButton onClick={closeMeteo}>\r\n                        Fermer la m&eacute;t&eacute;o\r\n                    </ActionButton>\r\n                )}\r\n            </ActionButtonList>\r\n            <AnimatePresence>\r\n                <ActionButtonList>\r\n                    {meteoDialog &&\r\n                        city.map((value, index) => (\r\n                            <ActionButton\r\n                                key={\"meteo-city-\" + index}\r\n                                onClick={() => {\r\n                                    sendRequest(\r\n                                        `Je voudrais savoir la météo à ${value}`\r\n                                    );\r\n                                    getMeteo(value);\r\n                                }}\r\n                            >\r\n                                {value}\r\n                            </ActionButton>\r\n                        ))}\r\n                </ActionButtonList>\r\n                {meteoDialog && (\r\n                    <motion.div\r\n                        exit={{ opacity: 0, x: -30 }}\r\n                        initial={{ opacity: 0, x: 80 }}\r\n                        animate={{ opacity: 1, x: 0 }}\r\n                        key={\"input-city\"}\r\n                        className={css({ margin: 10 })}\r\n                    >\r\n                        <input\r\n                            className={\"form-control\"}\r\n                            type=\"text\"\r\n                            ref={sinp}\r\n                            placeholder=\"Ville (Nom d'origine ex:Antananrivo,London,Toamasina) \"\r\n                        />\r\n                        <button className={\"btn btn-info mt-3\"} onClick={searchForMeteo}>Chercher</button>\r\n                    </motion.div>\r\n                )}\r\n            </AnimatePresence>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DialogMeteo;\r\n","C:\\HAUM\\Interface\\haum\\src\\components\\ActionButton.jsx",[],"C:\\HAUM\\Interface\\haum\\src\\components\\animation.js",[],"C:\\HAUM\\Interface\\haum\\src\\components\\info\\Projectinfo.jsx",[],{"ruleId":"53","severity":1,"message":"54","line":2,"column":10,"nodeType":"55","messageId":"56","endLine":2,"endColumn":25},{"ruleId":"53","severity":1,"message":"57","line":2,"column":9,"nodeType":"55","messageId":"56","endLine":2,"endColumn":12},{"ruleId":"58","severity":1,"message":"59","line":24,"column":23,"nodeType":"60","endLine":24,"endColumn":33},{"ruleId":"53","severity":1,"message":"61","line":66,"column":15,"nodeType":"55","messageId":"56","endLine":66,"endColumn":18},{"ruleId":"58","severity":1,"message":"62","line":69,"column":7,"nodeType":"63","endLine":69,"endColumn":24,"suggestions":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"53","severity":1,"message":"69","line":21,"column":15,"nodeType":"55","messageId":"56","endLine":21,"endColumn":19},"no-unused-vars","'getMeteoForCity' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'newDate' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","NewExpression","'msg' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sendRequest'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"'city' is assigned a value but never used.",{"desc":"73","fix":"74"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [finalTranscript, sendRequest]",{"range":"75","text":"76"},[2181,2198],"[finalTranscript, sendRequest]"]